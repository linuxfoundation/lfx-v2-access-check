// Code generated by goa v3.21.5, DO NOT EDIT.
//
// access-svc client
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-access-check/design

package accesssvc

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "access-svc" service client.
type Client struct {
	CheckAccessEndpoint goa.Endpoint
	ReadyzEndpoint      goa.Endpoint
	LivezEndpoint       goa.Endpoint
}

// NewClient initializes a "access-svc" service client given the endpoints.
func NewClient(checkAccess, readyz, livez goa.Endpoint) *Client {
	return &Client{
		CheckAccessEndpoint: checkAccess,
		ReadyzEndpoint:      readyz,
		LivezEndpoint:       livez,
	}
}

// CheckAccess calls the "check-access" endpoint of the "access-svc" service.
// CheckAccess may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): Bad request
//   - "Unauthorized" (type *goa.ServiceError): Unauthorized
//   - error: internal error
func (c *Client) CheckAccess(ctx context.Context, p *CheckAccessPayload) (res *CheckAccessResult, err error) {
	var ires any
	ires, err = c.CheckAccessEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CheckAccessResult), nil
}

// Readyz calls the "readyz" endpoint of the "access-svc" service.
// Readyz may return the following errors:
//   - "NotReady" (type *goa.ServiceError): Service not ready
//   - error: internal error
func (c *Client) Readyz(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.ReadyzEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}

// Livez calls the "livez" endpoint of the "access-svc" service.
func (c *Client) Livez(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.LivezEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}
