// Code generated by goa v3.21.5, DO NOT EDIT.
//
// access-svc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-access-check/design

package client

import (
	"encoding/json"
	"fmt"

	accesssvc "github.com/linuxfoundation/lfx-v2-access-check/gen/access_svc"
	goa "goa.design/goa/v3/pkg"
)

// BuildCheckAccessPayload builds the payload for the access-svc check-access
// endpoint from CLI flags.
func BuildCheckAccessPayload(accessSvcCheckAccessBody string, accessSvcCheckAccessVersion string, accessSvcCheckAccessBearerToken string) (*accesssvc.CheckAccessPayload, error) {
	var err error
	var body CheckAccessRequestBody
	{
		err = json.Unmarshal([]byte(accessSvcCheckAccessBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"requests\": [\n         \"project:123:read\",\n         \"committee:456:write\"\n      ]\n   }'")
		}
		if body.Requests == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("requests", "body"))
		}
		if len(body.Requests) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requests", body.Requests, len(body.Requests), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = accessSvcCheckAccessVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken string
	{
		bearerToken = accessSvcCheckAccessBearerToken
	}
	v := &accesssvc.CheckAccessPayload{}
	if body.Requests != nil {
		v.Requests = make([]string, len(body.Requests))
		for i, val := range body.Requests {
			v.Requests[i] = val
		}
	} else {
		v.Requests = []string{}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}
