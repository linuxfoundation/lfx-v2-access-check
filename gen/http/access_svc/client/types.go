// Code generated by goa v3.21.5, DO NOT EDIT.
//
// access-svc HTTP client types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-access-check/design

package client

import (
	accesssvc "github.com/linuxfoundation/lfx-v2-access-check/gen/access_svc"
	goa "goa.design/goa/v3/pkg"
)

// CheckAccessRequestBody is the type of the "access-svc" service
// "check-access" endpoint HTTP request body.
type CheckAccessRequestBody struct {
	// Resource-action pairs to check
	Requests []string `form:"requests" json:"requests" xml:"requests"`
}

// CheckAccessResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body.
type CheckAccessResponseBody struct {
	// Access check results
	Results []string `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
}

// CheckAccessBadRequestResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body for the "BadRequest" error.
type CheckAccessBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAccessUnauthorizedResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body for the "Unauthorized" error.
type CheckAccessUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReadyzNotReadyResponseBody is the type of the "access-svc" service "readyz"
// endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCheckAccessRequestBody builds the HTTP request body from the payload of
// the "check-access" endpoint of the "access-svc" service.
func NewCheckAccessRequestBody(p *accesssvc.CheckAccessPayload) *CheckAccessRequestBody {
	body := &CheckAccessRequestBody{}
	if p.Requests != nil {
		body.Requests = make([]string, len(p.Requests))
		for i, val := range p.Requests {
			body.Requests[i] = val
		}
	} else {
		body.Requests = []string{}
	}
	return body
}

// NewCheckAccessResultOK builds a "access-svc" service "check-access" endpoint
// result from a HTTP "OK" response.
func NewCheckAccessResultOK(body *CheckAccessResponseBody) *accesssvc.CheckAccessResult {
	v := &accesssvc.CheckAccessResult{}
	v.Results = make([]string, len(body.Results))
	for i, val := range body.Results {
		v.Results[i] = val
	}

	return v
}

// NewCheckAccessBadRequest builds a access-svc service check-access endpoint
// BadRequest error.
func NewCheckAccessBadRequest(body *CheckAccessBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAccessUnauthorized builds a access-svc service check-access endpoint
// Unauthorized error.
func NewCheckAccessUnauthorized(body *CheckAccessUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReadyzNotReady builds a access-svc service readyz endpoint NotReady error.
func NewReadyzNotReady(body *ReadyzNotReadyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCheckAccessResponseBody runs the validations defined on
// Check-AccessResponseBody
func ValidateCheckAccessResponseBody(body *CheckAccessResponseBody) (err error) {
	if body.Results == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("results", "body"))
	}
	return
}

// ValidateCheckAccessBadRequestResponseBody runs the validations defined on
// check-access_BadRequest_response_body
func ValidateCheckAccessBadRequestResponseBody(body *CheckAccessBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAccessUnauthorizedResponseBody runs the validations defined on
// check-access_Unauthorized_response_body
func ValidateCheckAccessUnauthorizedResponseBody(body *CheckAccessUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReadyzNotReadyResponseBody runs the validations defined on
// readyz_NotReady_response_body
func ValidateReadyzNotReadyResponseBody(body *ReadyzNotReadyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
