// Code generated by goa v3.21.5, DO NOT EDIT.
//
// access-svc HTTP server types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-access-check/design

package server

import (
	accesssvc "github.com/linuxfoundation/lfx-v2-access-check/gen/access_svc"
	goa "goa.design/goa/v3/pkg"
)

// CheckAccessRequestBody is the type of the "access-svc" service
// "check-access" endpoint HTTP request body.
type CheckAccessRequestBody struct {
	// Resource-action pairs to check
	Requests []string `form:"requests,omitempty" json:"requests,omitempty" xml:"requests,omitempty"`
}

// CheckAccessResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body.
type CheckAccessResponseBody struct {
	// Access check results
	Results []string `form:"results" json:"results" xml:"results"`
}

// CheckAccessBadRequestResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body for the "BadRequest" error.
type CheckAccessBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAccessUnauthorizedResponseBody is the type of the "access-svc" service
// "check-access" endpoint HTTP response body for the "Unauthorized" error.
type CheckAccessUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReadyzNotReadyResponseBody is the type of the "access-svc" service "readyz"
// endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCheckAccessResponseBody builds the HTTP response body from the result of
// the "check-access" endpoint of the "access-svc" service.
func NewCheckAccessResponseBody(res *accesssvc.CheckAccessResult) *CheckAccessResponseBody {
	body := &CheckAccessResponseBody{}
	if res.Results != nil {
		body.Results = make([]string, len(res.Results))
		for i, val := range res.Results {
			body.Results[i] = val
		}
	} else {
		body.Results = []string{}
	}
	return body
}

// NewCheckAccessBadRequestResponseBody builds the HTTP response body from the
// result of the "check-access" endpoint of the "access-svc" service.
func NewCheckAccessBadRequestResponseBody(res *goa.ServiceError) *CheckAccessBadRequestResponseBody {
	body := &CheckAccessBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAccessUnauthorizedResponseBody builds the HTTP response body from
// the result of the "check-access" endpoint of the "access-svc" service.
func NewCheckAccessUnauthorizedResponseBody(res *goa.ServiceError) *CheckAccessUnauthorizedResponseBody {
	body := &CheckAccessUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReadyzNotReadyResponseBody builds the HTTP response body from the result
// of the "readyz" endpoint of the "access-svc" service.
func NewReadyzNotReadyResponseBody(res *goa.ServiceError) *ReadyzNotReadyResponseBody {
	body := &ReadyzNotReadyResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAccessPayload builds a access-svc service check-access endpoint
// payload.
func NewCheckAccessPayload(body *CheckAccessRequestBody, version string, bearerToken string) *accesssvc.CheckAccessPayload {
	v := &accesssvc.CheckAccessPayload{}
	v.Requests = make([]string, len(body.Requests))
	for i, val := range body.Requests {
		v.Requests[i] = val
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// ValidateCheckAccessRequestBody runs the validations defined on
// Check-AccessRequestBody
func ValidateCheckAccessRequestBody(body *CheckAccessRequestBody) (err error) {
	if body.Requests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requests", "body"))
	}
	if len(body.Requests) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.requests", body.Requests, len(body.Requests), 1, true))
	}
	return
}
